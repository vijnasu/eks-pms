# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import tac_pb2 as tac__pb2


class TacServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CollectMetrics = channel.unary_unary(
                '/telemetry.TacService/CollectMetrics',
                request_serializer=tac__pb2.MetricsQuery.SerializeToString,
                response_deserializer=tac__pb2.QueryResponse.FromString,
                )
        self.QueryMetrics = channel.unary_unary(
                '/telemetry.TacService/QueryMetrics',
                request_serializer=tac__pb2.MetricsQuery.SerializeToString,
                response_deserializer=tac__pb2.QueryResponse.FromString,
                )
        self.CollectLogs = channel.unary_unary(
                '/telemetry.TacService/CollectLogs',
                request_serializer=tac__pb2.LogsQuery.SerializeToString,
                response_deserializer=tac__pb2.QueryResponse.FromString,
                )
        self.QueryLogs = channel.unary_unary(
                '/telemetry.TacService/QueryLogs',
                request_serializer=tac__pb2.LogsQuery.SerializeToString,
                response_deserializer=tac__pb2.QueryResponse.FromString,
                )
        self.CreateDashboard = channel.unary_unary(
                '/telemetry.TacService/CreateDashboard',
                request_serializer=tac__pb2.DashboardConfig.SerializeToString,
                response_deserializer=tac__pb2.QueryResponse.FromString,
                )
        self.UpdateDashboard = channel.unary_unary(
                '/telemetry.TacService/UpdateDashboard',
                request_serializer=tac__pb2.DashboardConfig.SerializeToString,
                response_deserializer=tac__pb2.QueryResponse.FromString,
                )
        self.ListDashboards = channel.unary_stream(
                '/telemetry.TacService/ListDashboards',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=tac__pb2.DashboardConfig.FromString,
                )


class TacServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CollectMetrics(self, request, context):
        """Collects metrics based on provided parameters
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryMetrics(self, request, context):
        """Queries metrics based on provided parameters
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CollectLogs(self, request, context):
        """Collects logs based on provided parameters
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryLogs(self, request, context):
        """Queries logs based on provided parameters
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateDashboard(self, request, context):
        """Creates a new dashboard based on provided configuration
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateDashboard(self, request, context):
        """Updates an existing dashboard based on provided configuration
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDashboards(self, request, context):
        """Lists all available dashboards
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TacServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CollectMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.CollectMetrics,
                    request_deserializer=tac__pb2.MetricsQuery.FromString,
                    response_serializer=tac__pb2.QueryResponse.SerializeToString,
            ),
            'QueryMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryMetrics,
                    request_deserializer=tac__pb2.MetricsQuery.FromString,
                    response_serializer=tac__pb2.QueryResponse.SerializeToString,
            ),
            'CollectLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.CollectLogs,
                    request_deserializer=tac__pb2.LogsQuery.FromString,
                    response_serializer=tac__pb2.QueryResponse.SerializeToString,
            ),
            'QueryLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryLogs,
                    request_deserializer=tac__pb2.LogsQuery.FromString,
                    response_serializer=tac__pb2.QueryResponse.SerializeToString,
            ),
            'CreateDashboard': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateDashboard,
                    request_deserializer=tac__pb2.DashboardConfig.FromString,
                    response_serializer=tac__pb2.QueryResponse.SerializeToString,
            ),
            'UpdateDashboard': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateDashboard,
                    request_deserializer=tac__pb2.DashboardConfig.FromString,
                    response_serializer=tac__pb2.QueryResponse.SerializeToString,
            ),
            'ListDashboards': grpc.unary_stream_rpc_method_handler(
                    servicer.ListDashboards,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=tac__pb2.DashboardConfig.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'telemetry.TacService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TacService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CollectMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/telemetry.TacService/CollectMetrics',
            tac__pb2.MetricsQuery.SerializeToString,
            tac__pb2.QueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/telemetry.TacService/QueryMetrics',
            tac__pb2.MetricsQuery.SerializeToString,
            tac__pb2.QueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CollectLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/telemetry.TacService/CollectLogs',
            tac__pb2.LogsQuery.SerializeToString,
            tac__pb2.QueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/telemetry.TacService/QueryLogs',
            tac__pb2.LogsQuery.SerializeToString,
            tac__pb2.QueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateDashboard(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/telemetry.TacService/CreateDashboard',
            tac__pb2.DashboardConfig.SerializeToString,
            tac__pb2.QueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateDashboard(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/telemetry.TacService/UpdateDashboard',
            tac__pb2.DashboardConfig.SerializeToString,
            tac__pb2.QueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListDashboards(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/telemetry.TacService/ListDashboards',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            tac__pb2.DashboardConfig.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
